Bibliografia:

https://hg.openjdk.java.net/code-tools/jmh/file/1c11c886e0c8/jmh-samples/src/main/java/org/openjdk/jmh/samples
http://tutorials.jenkov.com/java-performance/jmh.html
https://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html
https://ionutbalosin.com/2019/04/jvm-jit-compilers-benchmarks-report-19-04/
https://dzone.com/articles/stream-performance-3
https://blog.codefx.org/java/stream-performance-your-ideas/
https://stackoverflow.com/questions/32166193/understanding-java-8-streams-at-the-bytecode-level
https://stackoverflow.com/questions/22658322/java-8-performance-of-streams-vs-collections
https://blog.goyello.com/2017/06/19/testing-code-performance-jmh-tool/
https://blog.overops.com/benchmark-how-java-8-lambdas-and-streams-can-make-your-code-5-times-slower/
https://en.wikipedia.org/wiki/Loop_optimization
https://en.wikipedia.org/wiki/Optimizing_compiler
https://en.wikipedia.org/wiki/Strength_reduction
https://en.wikipedia.org/wiki/HotSpot
https://developer.ibm.com/articles/j-java-streams-3-brian-goetz/
http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/87ee5ee27509/src/share/vm/runtime/globals.hpp
https://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html
https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html
https://www.javaworld.com/article/2078635/jvm-performance-optimization-part-2-compilers.html
https://www.javaworld.com/article/2077337/watch-your-hotspot-compiler-go.html
https://wiki.openjdk.java.net/display/HotSpot/PerformanceTechniques
https://stackoverflow.com/questions/38721235/what-exactly-does-xx-tieredcompilation-do
https://docs.oracle.com/javase/7/docs/technotes/guides/vm/performance-enhancements-7.html
http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/2b2511bd3cc8/src/share/vm/runtime/advancedThresholdPolicy.hpp#l34
http://what-when-how.com/Tutorial/topic-684cn3k/Java-Performance-The-Definitive-Guide-115.html
https://dzone.com/articles/client-server-and-tiered-compilation
https://github.com/lampepfl/dotty/issues/222
https://www.baeldung.com/jvm-code-cache
https://docs.oracle.com/javase/8/embedded/develop-apps-platforms/codecache.htm
https://en.wikipedia.org/wiki/Java_processor

https://slides.com/gianlucalain/deck
